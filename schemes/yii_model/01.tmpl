{% if($model->getIsAbstract()): %}
{% message('Error: Abstract models is not supported') %}
{% else: %}
{% open_file('models/'.nice_path($model, 'php')) %}
<?php

/**
 * class {%= $model->getName() %} 
 *
 * This model has following attributes:
{% start_attr_list %}
 * ${%= $attribute->getName() %} {%= php_attr_type_name($attribute) %} 
{% end_attr_list %}
 */

class {%= $model->getName() %} extends {%= $model->getIsSubclass() ? implode(', ', $model->getSupermodels()) : 'CActiveRecord' %} {% if($model->getIsImplementation()) printf('implements %s', implode(', ', $model->getInterfaces())) %} 
{
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
	
	public function tableName()
	{
		return '{%= strtolower($model->getName()) %}';
	}
	
	public function attributeLabels()
	{
		return array(
{% start_attr_list %}
			'{%= yii_attr_id($attribute) %}' => '{%= attribute_label($attribute) %}',
{% end_attr_list %}
		);
	}
	
	public function rules()
	{
		return array(
{% foreach(yii_model_rules($model) as $rule => $attribs): %}
			array('	{%= implode(",\n\t\t\t\t\t", $attribs) %}', 
					{%= $rule %}),
{% endforeach %}
			array('	{%= implode(",\n\t\t\t\t\t", array_map(function($a) {return yii_attr_id($a);}, $model->getAttributes())) %}', 
					'safe', 'on' => 'search'),
		);
	}
	
	public function relations()
	{
		return array(
{% start_attr_list %}
{% 	if (!is_predefined_type($attribute)): %}
{% 		if ($attribute->getIsCollection()): %}
			'{%= $attribute->getName() %}' => array(self::HAS_MANY, '{%= $attribute->getCustomType() %}', '{%= strtolower($model->getName()) %}_id'),
{% 		else: %}
			'{%= $attribute->getName() %}' => array(self::BELONGS_TO, '{%= $attribute->getCustomType() %}', '{%= $attribute->getName() %}_id'),
{% 		endif %}
{% 	endif %}
{% end_attr_list %}
		);
	}
	
	public function search($params=array())
	{
		$criteria = new CDbCriteria($params);
		
{% start_attr_list %}
		$criteria->compare('t.`{%= yii_attr_id($attribute) %}`', $this->{%= yii_attr_id($attribute) %});
{% end_attr_list %}
		
		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
	
	public static function getList()
	{
		$criteria = new CDbCriteria();
		return CHtml::listData(self::model()->findAll($criteria), 'id', 'id');
	}
}
{% close_file() %}
{% endif %}
