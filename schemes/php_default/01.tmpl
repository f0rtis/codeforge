{% open_file(nice_path($model, 'php')) %}
<?php

{% if($model->getIsAbstract()) echo 'abstract ' %}class {%= $model->getName() %} {% if($model->getIsSubclass()) printf('extends %s', implode(', ', $model->getSupermodels())) %} {% if($model->getIsImplementation()) printf('implements %s', implode(', ', $model->getInterfaces())) %} 
{
{% start_attr_list %}
	/* @var {% if($attribute->getIsCollection()) echo 'array of ' %}{%= php_attr_type_name($attribute) %} */
	{%= php_attr_privacy($attribute) %} ${%= $attribute->getName() %} = {%= $attribute->getIsCollection() ? 'array()' : php_escape_value($attribute->getDefaultValue()) %};
	
{% end_attr_list %}
{% if($model->getIsSingle()): %} 
	/*
	 * Singleton
	 * @var {%= $model->getName() %} 
	 */
	protected static $singleton = null;
	
	/**
	* Get singleton
	* @return {%= $model->getName() %} 
	*/
	public function getSingleton()
	{
		if (null === self::$singleton) {
			self::$singleton = new self();
		}
		return self::$singleton;
	}
	
{% endif %}
{% start_attr_list %}
{% if($attribute->getPrivacy() != Attribute::PRIV_PUBLIC && $attribute->getMode() != Attribute::MODE_NOREADWRITE): %}
{% if($attribute->getIsCollection()): %}
{% if($attribute->getMode() != Attribute::MODE_READONLY): %} 
	/*
	 * Add an {%= $attribute->getName() %} element
	 * @param $value {%= php_attr_type_name($attribute) %} 
	 */
	public function add{%= ucfirst($attribute->getName()) %} ($value)
	{
		return $this->{%= $attribute->getName() %}[] = $value;
	}
	
	/*
	 * Remove an {%= $attribute->getName() %} element
	 * @param $index mixed
	 */
	public function remove{%= ucfirst($attribute->getName()) %} ($index)
	{
		unset($this->{%= $attribute->getName() %}[$index]);
	}
{% endif %}
{% if($attribute->getMode() != Attribute::MODE_WRITEONLY): %}
	/*
	 * Get an {%= $attribute->getName() %} elements
	 * @return {%= php_attr_type_name($attribute) %} 
	 */
	public function get{%= ucfirst($attribute->getName()) %}At ($index)
	{
		if (! array_key_exists($index, $this->{%= $attribute->getName() %})) {
			throw new Exception('Undefined index');
		}
		return $this->{%= $attribute->getName() %}[$index];
	}
	
	/*
	 * Get all {%= $attribute->getName() %} elements
	 * @return array
	 */
	public function get{%= ucfirst($attribute->getName()) %}s ()
	{
		return $this->{%= $attribute->getName() %};
	}
{% endif %}
{% else: %}
{% if($attribute->getMode() != Attribute::MODE_WRITEONLY): %}
	/*
	 * Getter for {%= $attribute->getName() %} 
	 * @return {%= php_attr_type_name($attribute) %} 
	 */
	public function get{%= ucfirst($attribute->getName()) %} ()
	{
		return $this->{%= $attribute->getName() %};
	}
{% endif %}	
{% if($attribute->getMode() != Attribute::MODE_READONLY): %}
	/*
	 * Setter for {%= $attribute->getName() %} 
	 * @param $value {%= php_attr_type_name($attribute) %} 
	 */
	public function set{%= ucfirst($attribute->getName()) %} ($value)
	{
		$this->{%= $attribute->getName() %} = $value;
	}
{% endif %}		
{% endif %}	
{% endif %}
{% end_attr_list %}
}
{% close_file() %}
